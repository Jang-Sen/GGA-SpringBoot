package com.springboot.gga.common.log.logtrace;

import com.springboot.gga.common.log.TraceStatus;

import javax.servlet.http.HttpSession;

public interface LogTrace {
    TraceStatus begin(String message);
    void end(TraceStatus status);
    void exception(TraceStatus status, Exception e);
    /**
     * aop란 모든 기능을 실행할때 체크하는 기능(모든작업에 일괄적으로 체크함)
     * 개발 단위에서는 Aop를 이용해 로그추적기를 사용했지만 -> 학습용
     * 실제 운영 서버에는 매번마다 로그가 출력되기 때문에 속도가 늦어짐(적합하지 않음)
     * 스프링 AOP를 활용하여 로그 추적 기능을 구현하였습니다. 이 기능은 개발 단계에서 효과적으로 운영되며,
     * 주요 기능에 대한 확인을 가능케 합니다. 그러나 실제 운영 서버에서는 로그 출력으로 인한 성능 저하 문제가 발생할 수 있어 이를 고려하여 적합성을 평가하였습니다.
     *
     * 개발 중 로그 추적 기능의 주요 장점은 다음과 같습니다:
     *
     * 모듈화 및 추상화: AOP를 사용하여 로그 기능을 모듈화하고 핵심 비즈니스 로직과 분리함으로써 코드의 가독성을 향상시킵니다.
     * 관심사 분리: 핵심 비즈니스 로직에 집중하면서도, 로깅과 같은 보조 역할을 수행함으로써 코드 유지보수성을 높입니다.
     * 개발 중 디버깅: 로그를 통해 개발 중에도 각각의 단계에서 어떤 데이터가 처리되고 있는지 추적할 수 있어 디버깅 및 문제 해결이 원활합니다.
     * 단위 테스트 및 검증: AOP 기반 로그 추적은 단위 테스트를 통해 정확한 동작을 검증할 수 있습니다.
     * 그러나 실제 운영 환경에서는 매번 로그 출력으로 인한 성능 저하가 우려되므로 다음과 같은 측면을 고려해야 합니다:
     *
     * 성능 저하: 매번 로그를 출력하는 작업은 I/O 작업을 수반하며, 이는 애플리케이션의 처리 속도를 늦출 수 있습니다.
     * 운영 환경 적합성: 운영 서버에서의 로그 출력은 서버 자원을 소모하므로, 실제 운영 환경에서는 필요한 로그 레벨을 조정하여 적절한 로깅 전략을 구성해야 합니다.
     * 모니터링 및 관리: 로그의 양이 많을 경우 로그 파일 관리 및 모니터링에 대한 고려가 필요합니다.
     * 따라서, 개발 단계에서의 로그 추적은 유용하지만, 실제 운영 서버에서의 적합성을 평가하여 로그 레벨 및 출력 빈도를 조정하여 성능 문제를 최소화하고 운영 환경에서의 안정성을 확보해야 합니다.
     */

}
